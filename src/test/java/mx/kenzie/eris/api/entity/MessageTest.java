package mx.kenzie.eris.api.entity;

import mx.kenzie.eris.test.VerifierTest;
import org.junit.Test;

public class MessageTest extends VerifierTest {
    
    @Test
    public void test() {
        this.verify(Message.class, """
            id	snowflake	id of the message
            channel_id	snowflake	id of the channel the message was sent in
            author*	user object	the author of this message (not guaranteed to be a valid user, see below)
            content**	string	contents of the message
            timestamp	ISO8601 timestamp	when this message was sent
            edited_timestamp	?ISO8601 timestamp	when this message was edited (or null if never)
            tts	boolean	whether this was a TTS message
            mention_everyone	boolean	whether this message mentions everyone
            mentions	array of user objects	users specifically mentioned in the message
            mention_roles	array of role object ids	roles specifically mentioned in this message
            mention_channels?***	array of channel mention objects	channels specifically mentioned in this message
            attachments**	array of attachment objects	any attached files
            embeds**	array of embed objects	any embedded content
            reactions?	array of reaction objects	reactions to the message
            nonce?	integer or string	used for validating a message was sent
            pinned	boolean	whether this message is pinned
            webhook_id?	snowflake	if the message is generated by a webhook, this is the webhook's id
            type	integer	type of message
            activity?	message activity object	sent with Rich Presence-related chat embeds
            application?	partial application object	sent with Rich Presence-related chat embeds
            application_id?	snowflake	if the message is an Interaction or application-owned webhook, this is the id of the application
            message_reference?	message reference object	data showing the source of a crosspost, channel follow add, pin, or reply message
            flags?	integer	message flags combined as a bitfield
            referenced_message?****	?message object	the message associated with the message_reference
            interaction?	message interaction object	sent if the message is a response to an Interaction
            thread?	channel object	the thread that was started from this message, includes thread member object
            components?**	array of message components	sent if the message contains components like buttons, action rows, or other interactive components
            sticker_items?	array of message sticker item objects	sent if the message contains stickers
            stickers?	array of sticker objects	Deprecated the stickers sent with the message
            position?	integer	A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread""");
        this.verify(Message.Activity.class, """
            type	integer	type of message activity
            party_id?	string	party_id from a Rich Presence event""");
        this.verify(Message.Interaction.class, """
            id	snowflake	ID of the interaction
            type	interaction type	Type of interaction
            name	string	Name of the application command, including subcommands and subcommand groups
            user	user object	User who invoked the interaction
            member?	partial member object	Member who invoked the interaction in the guild""");
    }
    
    @Test
    public void retrieveMessage() {
        final Message message = channel.getMessage(1001025353273327686L);
        assert message.successful() : message.error().getMessage();
        assert message.content.equals("message");
        assert message.author.id.equals("196709350469795841");
        assert message.attachments == null || message.attachments.length == 0;
    }
    
    @Test
    public void sendDeleteMessage() {
        final Channel channel = api.getChannel(1001024258140540938L);
        final Message message = channel.send(new Message("test"));
        message.await();
        assert message.successful() : message.error().getMessage();
        message.delete();
        message.await();
        assert message.successful() : message.error().getMessage();
    }
    
    @Test
    public void writeTest() {
        final Message message = bot.getAPI().write("hello there");
        assert message != null;
        assert message.successful() : message.error().getMessage();
    }
    
    @Test
    public void sendMessageTest() {
        final Message message = new Message("hello there");
        message.addAttachment("test.txt", "test file.");
        message.addAttachment("test_2.txt", "test file two.");
        api.sendMessage(channel, message);
        message.await();
        assert message.successful() : message.error().getMessage();
        assert message.content.equals("hello there");
        message.content = "general kenobi";
        message.edit();
        message.await();
        assert message.successful() : message.error().getMessage();
        message.delete();
        message.await();
        assert message.successful() : message.error().getMessage();
    }
    
}
